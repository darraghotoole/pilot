#!/usr/bin/env ruby
require 'yaml'
require 'open3'

SERVICES_DIR =  File.join(File.dirname(__FILE__), "services")

def service_config_file(service_name)
    File.new(File.join(SERVICES_DIR, "#{service_name}.yml"))
end

def load_service_config(services, service_name)
  config = YAML.load(service_config_file(service_name).read) || {}
  config["image"] = service_name unless config["image"]
  config["container_name"] = service_name
  services[service_name] = config
 
  dependencies = config["depends_on"]
  if(dependencies && !dependencies.empty?)
    dependencies.each {|dependency_name| load_service_config(services, dependency_name)}
  end
end

def generate_docker_compose_yml(services)
  compose = {
    "version" => "2",
    "services" => services 
  }

  yaml = YAML.dump(compose)

  #puts "Final docker-compose yaml:"
  #puts yaml
  yaml
end

def start(service_name)
  services = {}
  load_service_config(services, service_name)
  compose_config = generate_docker_compose_yml(services)

  Open3.capture2("docker-compose -f - up -d", :stdin_data=> compose_config)
end

def running_service_names 
  output, startus = Open3.capture2("docker ps") 
  parse_service_names(output)
end

def all_service_names
  output, startus = Open3.capture2("docker ps -a") 
  parse_service_names(output)
end

def parse_service_names(output)
    output.lines.tap {|a| a.shift}.map {|l| l.split(" ").last}
end

def service_names
  service_files = Dir[File.join(SERVICES_DIR, "*.yml")]
  service_files.map {|s| File.basename(s, ".yml")}
end

def list
    services = service_names
    running = running_service_names

    padding_size = services.max_by(&:length).length
    services.each {|s| puts "#{s.ljust(padding_size)} #{running.include?(s) ? "running" : "not running"}"}
end

def usage
    puts "pilot <commond"
    puts
    puts "Commands:"
    puts "start <service_name>\t\t\tstart specified service and all dependencies"
end

def stop(service_name)
  output, status = Open3.capture2("docker stop #{service_name}") 
  puts "stopped #{output}"
end

def stop_all
    running_service_names.each {|s| stop(s)}
end

def clean(service_name)
  output, status = Open3.capture2("docker rm #{service_name}") 
  puts "deleted #{output}"
end

command = ARGV[0]
service_name = ARGV[1]

if command == "start"
    start(service_name)
elsif command == "stop"
    if service_name == "all"
        stop_all
    else
        stop(service_name)
    end
elsif command == "clean"
    stop_all
    all_service_names.each {|s| clean(s)}
else
    list
end
